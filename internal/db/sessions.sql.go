// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (id, expires_at, user_id, agent_id)
VALUES ($1, $2, $3, $4)
`

type CreateSessionParams struct {
	ID        string        `json:"id"`
	ExpiresAt time.Time     `json:"expires_at"`
	UserID    uuid.UUID     `json:"user_id"`
	AgentID   uuid.NullUUID `json:"agent_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession,
		arg.ID,
		arg.ExpiresAt,
		arg.UserID,
		arg.AgentID,
	)
	return err
}

const getSessionById = `-- name: GetSessionById :one
SELECT id, expires_at, user_id, agent_id FROM sessions 
WHERE id = $1 and expires_at > NOW()
`

func (q *Queries) GetSessionById(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionById, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.ExpiresAt,
		&i.UserID,
		&i.AgentID,
	)
	return i, err
}

const setAgentForSession = `-- name: SetAgentForSession :exec
UPDATE sessions 
SET agent_id = $1
WHERE id = $2
`

type SetAgentForSessionParams struct {
	AgentID uuid.NullUUID `json:"agent_id"`
	ID      string        `json:"id"`
}

func (q *Queries) SetAgentForSession(ctx context.Context, arg SetAgentForSessionParams) error {
	_, err := q.db.ExecContext(ctx, setAgentForSession, arg.AgentID, arg.ID)
	return err
}
