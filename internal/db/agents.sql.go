// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: agents.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAgent = `-- name: CreateAgent :exec
INSERT INTO agents (id, name, token, user_id)
VALUES ($1, $2, $3, $4)
`

type CreateAgentParams struct {
	ID     uuid.UUID `json:"id"`
	Name   string    `json:"name"`
	Token  string    `json:"token"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) error {
	_, err := q.db.ExecContext(ctx, createAgent,
		arg.ID,
		arg.Name,
		arg.Token,
		arg.UserID,
	)
	return err
}

const getAgentTokenById = `-- name: GetAgentTokenById :one
SELECT token FROM agents WHERE id = $1
`

func (q *Queries) GetAgentTokenById(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getAgentTokenById, id)
	var token string
	err := row.Scan(&token)
	return token, err
}

const getAgentsByUserId = `-- name: GetAgentsByUserId :many
SELECT id, name FROM agents WHERE user_id = $1
`

type GetAgentsByUserIdRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) GetAgentsByUserId(ctx context.Context, userID uuid.UUID) ([]GetAgentsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getAgentsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAgentsByUserIdRow
	for rows.Next() {
		var i GetAgentsByUserIdRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
